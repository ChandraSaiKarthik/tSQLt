# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyyMMdd)$(Rev:.r)($(Build.BuildId))

trigger: none
pr: none
schedules:
  - cron: 0 12 20 3 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true
  - cron: 15 12 20 3 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true

pool:
  vmImage: 'vs2017-win2016'

variables:
  NamePreFix: 'tSQLtCI_DevTestLab_'


steps:

- task: CmdLine@2
  condition: false
  inputs:
    script: |
      echo end pipeline here      
      echx

- task: PowerShell@2
  name: Generate_DevTest_Lab_Name
  inputs:
    targetType: 'inline'
    script: |
      $DevTestLabName = If ([string]::IsNullOrEmpty($env:DevTestLabNameOverride)) {("$(NamePreFix)" + (Get-Date).tostring(“yyyyMMdd”) + '_' + $(Build.BuildId))} else {($env:DevTestLabNameOverride)}
      $DevTestLabRGName = $DevTestLabName+'_RG'
      $DevTestLabVNetName = $DevTestLabName+'_VNet0001'
      $vmName = If ([string]::IsNullOrEmpty($env:vmNameOverride)) {('V$(Build.BuildId)'+(('$(template)').replace('-',''))+''+$DevTestLabName).substring(0,15)} else {($env:vmNameOverride)}
      Write-Host 'DevTestLabRGName: ' $DevTestLabRGName
      Write-Host "##vso[task.setvariable variable=DevTestLabRGName;]$DevTestLabRGName"
      Write-Host 'DevTestLabName: ' $DevTestLabName
      Write-Host "##vso[task.setvariable variable=DevTestLabName;]$DevTestLabName"
      Write-Host 'DevTestLabVNetName: ' $DevTestLabVNetName
      Write-Host "##vso[task.setvariable variable=DevTestLabVNetName;]$DevTestLabVNetName"
      Write-Host 'vmName: ' $vmName
      Write-Host "##vso[task.setvariable variable=vmName;]$vmName"


- task: AzurePowerShell@4
  name: Create_Resource_Group
  condition: and(succeeded(), eq(variables['CreateNewEnvironment'], '1'))
  inputs:
    azurePowerShellVersion: 'LatestVersion'
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'InlineScript'
    Inline: |
      Write-Host 'Creating Resource Group:' $(DevTestLabRGName)
      Set-PSDebug -Trace 1;
      New-AzResourceGroup -Name "$(DevTestLabRGName)" -Location "East US 2" -Tag @{Department="tSQLtCI"; Ephemeral="True"} -Force
      Set-PSDebug -Trace 0;
      Write-Host 'Done.'

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_VNet_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/CreateVNetTemplate.json'
    deploymentMode: 'Validation'

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_DTL_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/DevTestLabTemplate.json'
    deploymentMode: 'Validation'

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_VM_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/CreateVMTemplate.json'
    deploymentMode: 'Validation'

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_DSC_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/DSCTemplate.json'
    deploymentMode: 'Validation'


- task: AzurePowerShell@4
  name: Create_VNet
  condition: and(succeeded(), eq(variables['CreateNewEnvironment'], '1'))
  inputs:
    azurePowerShellVersion: 'LatestVersion'
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Set-PSDebug -Trace 1;
      $VNet = New-AzResourceGroupDeployment -ResourceGroupName "$(DevTestLabRGName)" -TemplateFile "CI/CreateVNetTemplate.json" -VNet_name "$(DevTestLabVNetName)" -SQL_Port "41433"
      Set-PSDebug -Trace 0;
      $DevTestLabVNetSubnetName = $VNet.Outputs.subnetName.Value
      Write-Host 'DevTestLabVNetSubnetName: ' $DevTestLabVNetSubnetName
      Write-Host "##vso[task.setvariable variable=DevTestLabVNetSubnetName;]$DevTestLabVNetSubnetName"

- task: AzurePowerShell@4
  name: GetSubnetName
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host "Getting DevTestLabVNetSubnetName"
      Set-PSDebug -Trace 1;
      $DevTestLabVNetSubnetName = (Get-AzResource -ResourceGroupName "$(DevTestLabRGName)" -ResourceType "Microsoft.Network/virtualNetworks" -Name "$(DevTestLabVNetName)").Properties.Subnets[0].Name
      Set-PSDebug -Trace 0;
      Write-Host 'DevTestLabVNetSubnetName: ' $DevTestLabVNetSubnetName
      Write-Host "##vso[task.setvariable variable=DevTestLabVNetSubnetName;]$DevTestLabVNetSubnetName"


- task: AzurePowerShell@4
  name: Create_DevTest_Lab_With_Other_Resources
  condition: and(succeeded(), eq(variables['CreateNewEnvironment'], '1'))
  inputs:
    azurePowerShellVersion: 'LatestVersion'
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Set-PSDebug -Trace 1;
      New-AzResourceGroupDeployment -ResourceGroupName "$(DevTestLabRGName)" -TemplateFile "CI/DevTestLabTemplate.json" -newLabName "$(DevTestLabName)" -VNetName "$(DevTestLabVNetName)" -SubNetName "$(DevTestLabVNetSubnetName)"
      Set-PSDebug -Trace 0;


- task: AzurePowerShell@4
  name: Get_DevTest_Lab_Environment_Variables
  inputs:
    azurePowerShellVersion: 'LatestVersion'
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'InlineScript'
    Inline: |
      Write-Host 'GetAzResource'
      Get-AzResource -ResourceGroupName "$(DevTestLabRGName)" -ResourceType "Microsoft.Storage/storageAccounts"
      Get-AzResource -ResourceGroupName "$(DevTestLabRGName)" -ResourceType "Microsoft.Network/virtualNetworks"
      Write-Host '-------------'
      $DevTestLabStorageAccount = (Get-AzResource -ResourceGroupName "$(DevTestLabRGName)" -ResourceType "Microsoft.Storage/storageAccounts").ResourceName
      Write-Host "DevTestLabStorageAccount: >>>" $DevTestLabStorageAccount "<<<"
      Write-Host "##vso[task.setvariable variable=DevTestLabStorageAccount;]$DevTestLabStorageAccount"
      Write-Host '-------------'
      #$TempDevTestLabVirtualNetwork = @(Get-AzResource -ResourceGroupName "$(DevTestLabRGName)" -ResourceType "Microsoft.Network/virtualNetworks")[0]
      #$DevTestLabVirtualNetworkName = $TempDevTestLabVirtualNetwork.Name
      #Write-Host "DevTestLabVirtualNetworkName: >>>" $DevTestLabVirtualNetworkName "<<<"
      #Write-Host "##vso[task.setvariable variable=DevTestLabVirtualNetworkName;]$DevTestLabVirtualNetworkName"
      #Write-Host '-------------'
      #$DevTestLabVirtualNetworkSubNetName = @(Get-AzVirtualNetwork -Name $TempDevTestLabVirtualNetwork.Name -ResourceGroupName "$(DevTestLabRGName)")[0].SubNets[0].Name
      #Write-Host "DevTestLabVirtualNetworkSubNetName: >>>" $DevTestLabVirtualNetworkSubNetName "<<<"
      #Write-Host "##vso[task.setvariable variable=DevTestLabVirtualNetworkSubNetName;]$DevTestLabVirtualNetworkSubNetName"
      #Write-Host '-------------'
      Write-Host 'Currently Existing tSQLtCI Resource Groups:'
      Get-AzResourceGroup -Tag @{Department="tSQLtCI"; Ephemeral="True"} 


- task: AzurePowerShell@4
  name: CreateVM
  condition: and(succeeded(), eq(variables['CreateNewVM'], '1'))
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host 'Creating New VM'
      Set-PSDebug -Trace 1;
      $VM = New-AzResourceGroupDeployment -ResourceGroupName "$(DevTestLabRGName)" -TemplateFile "CI/CreateVMTemplate.json" -labName "$(DevTestLabName)" -newVMName "$(vmName)" -userName "$(userName)" -DevTestLabVirtualNetworkName "$(DevTestLabVNetName)" -DevTestLabVirtualNetworkSubNetName "$(DevTestLabVNetSubnetName)" -password "qTv3f9gduUFuc8BQTZUq4MEcFbY3(2H)" -ContactEmail "$(ContactEmail)"
      Set-PSDebug -Trace 0;
      Write-Host 'Finished Creating New VM'
      $labVMId = $VM.Outputs.labVMId.Value
      Write-Host 'labVMId: ' $labVMId
      Write-Host "##vso[task.setvariable variable=labVMId;]$labVMId"

- task: AzurePowerShell@4
  name: GetLabVmId
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host "Getting labVMId"
      $labVmId = (Get-AzResource -ResourceGroupName "$(DevTestLabRGName)" -ResourceType "Microsoft.DevTestLab/labs/virtualMachines" -Name "$(vmName)").ResourceId
      Write-Host 'labVMId: ' $labVMId
      Write-Host "##vso[task.setvariable variable=labVMId;]$labVMId"



- task: Bash@3
  name: print_environment_variables
  inputs:
    targetType: 'inline'
    script: |
      echo 'env start------------'
      env | sort
      echo 'env stop-------------'


- task: AzurePowerShell@4
  name: get_VM_parameters
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'FilePath'
    ScriptPath: 'CI/GetLabVMParams.ps1'
    ScriptArguments: '-labVmId ''$(labVMId)'' ' 
    azurePowerShellVersion: 'LatestVersion'



- task: AzurePowerShell@4
  name: StartVM
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host 'Starting the New VM'
      Set-PSDebug -Trace 1;
      Start-AzVM -Name "$(vmName)" -ResourceGroupName "$(labVmRgName)"
      Set-PSDebug -Trace 0;



- task: AzurePowerShell@4
  name: SetupSQL
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host 'Creating New VM'
      Set-PSDebug -Trace 1;
      $VM = New-AzResourceGroupDeployment -ResourceGroupName "$(labVmRgName)" -TemplateFile "CI/CreateSQLVirtualMachineTemplate.json" -sqlPortNumber "41433" -sqlAuthenticationLogin "tSQLt_External" -sqlAuthenticationPassword "qTv3f9gduUFuc8BQTZUq4MEcFbY3(2H)" -newVMName "$(vmName)" -newVMRID "$(labVmComputeId)"
      Set-PSDebug -Trace 0;
      Write-Host 'Finished Creating New VM'
      $labVMId = $VM.Outputs.labVMId.Value
      Write-Host 'labVMId: ' $labVMId
      Write-Host "##vso[task.setvariable variable=labVMId;]$labVMId"



- task: CmdLine@2
  condition: true
  inputs:
    script: |
      echo end pipeline here      
      echx


