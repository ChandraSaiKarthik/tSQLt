# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyyMMdd)$(Rev:.r)($(Build.BuildId))

trigger: none
pr: none
schedules:
  - cron: 0 12 24 3 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true
  - cron: 15 12 24 3 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true

pool:
  vmImage: 'vs2017-win2016'

variables:
  NamePreFix: 'tSQLtCI_DevTestLab_'


steps:

- task: CmdLine@2
  condition: false
  inputs:
    script: |
      echo end pipeline here      
      echx

- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    KeyVaultName: 'tSQLtSigningKey'
    SecretsFilter: '*'

- task: PowerShell@2
  name: Generate_DevTest_Lab_Name
  inputs:
    targetType: 'inline'
    script: |
      $DevTestLabName = If ([string]::IsNullOrEmpty($env:DevTestLabNameOverride)) {("$(NamePreFix)" + (Get-Date).tostring(“yyyyMMdd”) + '_' + $(Build.BuildId))} else {($env:DevTestLabNameOverride)}
      $DevTestLabRGName = $DevTestLabName+'_RG'
      $DevTestLabVNetName = $DevTestLabName+'_VNet0001'
      $vmName = If ([string]::IsNullOrEmpty($env:vmNameOverride)) {('V$(Build.BuildId)'+(('$(template)').replace('-',''))+''+$DevTestLabName).substring(0,15)} else {($env:vmNameOverride)}
      Write-Host 'DevTestLabRGName: ' $DevTestLabRGName
      Write-Host "##vso[task.setvariable variable=DevTestLabRGName;]$DevTestLabRGName"
      Write-Host 'DevTestLabName: ' $DevTestLabName
      Write-Host "##vso[task.setvariable variable=DevTestLabName;]$DevTestLabName"
      Write-Host 'DevTestLabVNetName: ' $DevTestLabVNetName
      Write-Host "##vso[task.setvariable variable=DevTestLabVNetName;]$DevTestLabVNetName"
      Write-Host 'vmName: ' $vmName
      Write-Host "##vso[task.setvariable variable=vmName;]$vmName"



- task: PowerShell@2
  name: PrintSQLVersionInfo
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      
      Invoke-Sqlcmd -Query "SELECT SUSER_NAME() U;SELECT SYSDATETIME() T;SELECT @@VERSION V;" -ServerInstance "$(labVMFqdn),$(SQL_Port)" -Username "tSQLt_External" -Password "qTv3f9gduUFuc8BQTZUq4MEcFbY3(2H)" 

- task: CmdLine@2
  condition: true
  inputs:
    script: |
      echo end pipeline here      
      echx


